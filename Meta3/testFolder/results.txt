[get_anoted_tree]
ArrayDeclaration
FuncDefinition
FuncDefinition
[insert_function_definition]
insert_function_funcBody
check_inside_funcBody
If
[get_inside_funcBody] Eq
get_inside_operator
[get_inside_id] node->value: a
[get_inside_funcBody] Return
get_inside_operator
[get_inside_id] node->value: b
[get_inside_funcBody] StatList
check_inside_funcBody
For
[get_inside_funcBody] Null
check_inside_funcBody
[get_inside_funcBody] Gt
get_inside_operator
[get_inside_id] node->value: b
[get_inside_funcBody] Null
check_inside_funcBody
[get_inside_funcBody] If
[get_inside_funcBody] Gt
get_inside_operator
[get_inside_id] node->value: a
[get_inside_id] node->value: b
[get_inside_funcBody] Store
get_inside_operator
[get_inside_id] node->value: a
else: Sub
[get_inside_funcBody] Id
[get_inside_id] node->value: a
[get_inside_funcBody] Sub
get_inside_operator
[get_inside_id] node->value: a
[get_inside_id] node->value: b
[get_inside_funcBody] Store
get_inside_operator
[get_inside_id] node->value: b
else: Sub
[get_inside_funcBody] Id
[get_inside_id] node->value: b
[get_inside_funcBody] Sub
get_inside_operator
[get_inside_id] node->value: b
[get_inside_id] node->value: a
Return
get_inside_operator
[get_inside_id] node->value: a
FuncDefinition
FuncDefinition
[insert_function_definition]
insert_function_funcBody
check_inside_funcBody
Declaration
Declaration
If
[get_inside_funcBody] Gt
get_inside_operator
[get_inside_id] node->value: argc
[get_inside_funcBody] StatList
check_inside_funcBody
Store
get_inside_operator
[get_inside_id] node->value: a
call
check_call_type
Id
get_type_Call
get_type_call: int(char*)
type_call: int
auxType: int
[get_inside_funcBody] Id
[get_inside_id] node->value: atoi
[get_inside_funcBody] Deref
[get_inside_funcBody] Add
get_inside_operator
[get_inside_id] node->value: argv
Store
get_inside_operator
[get_inside_id] node->value: b
call
check_call_type
Id
get_type_Call
get_type_call: int(char*)
type_call: int
auxType: int
[get_inside_funcBody] Id
[get_inside_id] node->value: atoi
[get_inside_funcBody] Deref
[get_inside_funcBody] Add
get_inside_operator
[get_inside_id] node->value: argv
Call
check_call_type
Id
get_type_Call
get_type_call: int(char*)
type_call: int
auxType: int
[get_inside_funcBody] Id
[get_inside_id] node->value: puts
[get_inside_funcBody] Call
call
check_call_type
Id
get_type_Call
get_type_call: char*(int,char*)
type_call: char*
auxType: char*
[get_inside_funcBody] Id
[get_inside_id] node->value: itoa
[get_inside_funcBody] Call
call
check_call_type
Id
get_type_Call
get_type_call: int(int,int)
type_call: int
auxType: int
[get_inside_funcBody] Id
[get_inside_id] node->value: gcd
[get_inside_funcBody] Id
[get_inside_id] node->value: a
[get_inside_funcBody] Id
[get_inside_id] node->value: b
[get_inside_funcBody] Id
[get_inside_id] node->value: buffer
[get_inside_funcBody] Call
call
check_call_type
Id
get_type_Call
get_type_call: int(char*)
type_call: int
auxType: int
[get_inside_funcBody] Id
[get_inside_id] node->value: puts
[get_inside_funcBody] StrLit
check_inside_funcBody
Return
get_inside_operator
===== Global Symbol Table =====
atoi	int(char*)
itoa	char*(int,char*)
puts	int(char*)
buffer	char[20]
gcd	int(int,int)
main	int(int,char**)

===== Function gcd Symbol Table =====
return	int
a	int	param
b	int	param

===== Function main Symbol Table =====
return	int
argc	int	param
argv	char**	param
a	int
b	int

Program
..ArrayDeclaration
....Char
....Id(buffer)
....IntLit(20)
..FuncDefinition
....Int
....Id(gcd)
....ParamList
......ParamDeclaration
........Int
........Id(a)
......ParamDeclaration
........Int
........Id(b)
....FuncBody
......If
........Eq - int
..........Id(a) - int
..........IntLit(0) - int
........Return
..........Id(b) - int
........StatList
..........For
............Null
............Gt - int
..............Id(b) - int
..............IntLit(0) - int
............Null
............If
..............Gt - int
................Id(a) - int
................Id(b) - int
..............Store - int
................Id(a) - int
................Sub - int
..................Id(a) - int
..................Id(b) - int
..............Store - int
................Id(b) - int
................Sub - int
..................Id(b) - int
..................Id(a) - int
..........Return
............Id(a) - int
..FuncDefinition
....Int
....Id(main)
....ParamList
......ParamDeclaration
........Int
........Id(argc)
......ParamDeclaration
........Char
........Pointer
........Pointer
........Id(argv)
....FuncBody
......Declaration
........Int
........Id(a)
......Declaration
........Int
........Id(b)
......If
........Gt - int
..........Id(argc) - int
..........IntLit(2) - int
........StatList
..........Store - int
............Id(a) - int
............Call - int
..............Id(atoi) - int(char*)
..............Deref - char*
................Add - char**
..................Id(argv) - char**
..................IntLit(1) - int
..........Store - int
............Id(b) - int
............Call - int
..............Id(atoi) - int(char*)
..............Deref - char*
................Add - char**
..................Id(argv) - char**
..................IntLit(2) - int
..........Call - int
............Id(puts) - int(char*)
............Call - char*
..............Id(itoa) - char*(int,char*)
..............Call - int
................Id(gcd) - int(int,int)
................Id(a) - int
................Id(b) - int
..............Id(buffer) - char[20]
........Call - int
..........Id(puts) - int(char*)
..........StrLit("Error: two parameters required.")
......Return
........IntLit(0) - int

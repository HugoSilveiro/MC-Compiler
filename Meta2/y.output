Terminals unused in grammar

   AMP
   AND
   ASSIGN
   DIV
   EQ
   GE
   GT
   LE
   LT
   MINUS
   MOD
   NE
   NOT
   OR
   PLUS
   RETURN
   RESERVED


Grammar

    0 $accept: Start $end

    1 Start: FuncDefDecDec FuncDefDecDec1

    2 FuncDefDecDec: FunctionDefinition
    3              | FunctionDeclaration
    4              | Declaration

    5 FuncDefDecDec1: Empty
    6               | FuncDefDecDec1 FuncDefDecDec

    7 FunctionDefinition: TypeSpec FunctionDeclarator FunctionBody

    8 FunctionBody: LBRACE Declaration1 Statement1 RBRACE

    9 Declaration1: Empty
   10             | Declaration1 Declaration

   11 Statement1: Empty
   12           | Statement1 Statement

   13 FunctionDeclaration: TypeSpec FunctionDeclarator SEMI

   14 FunctionDeclarator: Asterisk ID LPAR ParameterList RPAR

   15 Asterisk: Empty
   16         | Asterisk AST

   17 ParameterList: ParameterDeclaration COMMA_ParameterDeclaration

   18 COMMA_ParameterDeclaration: Empty
   19                           | COMMA_ParameterDeclaration COMMA ParameterDeclaration

   20 ParameterDeclaration: TypeSpec Asterisk
   21                     | TypeSpec Asterisk ID

   22 Declaration: TypeSpec Declarator COMMA_Declarator SEMI

   23 COMMA_Declarator: Empty
   24                 | COMMA_Declarator COMMA Declarator

   25 TypeSpec: CHAR
   26         | INT
   27         | VOID

   28 Declarator: Asterisk ID
   29           | Asterisk ID LSQSTATE INTLITSTATE RSQSTATE

   30 LSQSTATE: LSQ

   31 RSQSTATE: RSQ

   32 INTLITSTATE: INTLIT

   33 Statement: SEMI
   34          | Expr SEMI
   35          | LBRACE Statement1 RBRACE
   36          | StateIF
   37          | FOR LPAR Expr0 SEMI Expr0 SEMI Expr0 RPAR Statement

   38 StateIF: IF LPAR Expr RPAR Statement
   39        | IF LPAR Expr RPAR Statement ELSE Statement

   40 Expr0: Empty
   41      | Expr

   42 Expr: LPAR Expr RPAR
   43     | ID
   44     | INTLIT
   45     | CHRLIT
   46     | STRLIT

   47 Empty: %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
AMP (258)
AND (259)
ASSIGN (260)
AST (261) 16
CHAR (262) 25
COMMA (263) 19 24
DIV (264)
ELSE (265) 39
EQ (266)
FOR (267) 37
GE (268)
GT (269)
IF (270) 38 39
INT (271) 26
LBRACE (272) 8 35
LE (273)
LPAR (274) 14 37 38 39 42
LSQ (275) 30
LT (276)
MINUS (277)
MOD (278)
NE (279)
NOT (280)
OR (281)
PLUS (282)
RBRACE (283) 8 35
RETURN (284)
RPAR (285) 14 37 38 39 42
RSQ (286) 31
SEMI (287) 13 22 33 34 37
VOID (288) 27
RESERVED (289)
ID (290) 14 21 28 29 43
INTLIT (291) 32 44
STRLIT (292) 46
CHRLIT (293) 45
"then" (294)


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
Start (41)
    on left: 1, on right: 0
FuncDefDecDec (42)
    on left: 2 3 4, on right: 1 6
FuncDefDecDec1 (43)
    on left: 5 6, on right: 1 6
FunctionDefinition (44)
    on left: 7, on right: 2
FunctionBody (45)
    on left: 8, on right: 7
Declaration1 (46)
    on left: 9 10, on right: 8 10
Statement1 (47)
    on left: 11 12, on right: 8 12 35
FunctionDeclaration (48)
    on left: 13, on right: 3
FunctionDeclarator (49)
    on left: 14, on right: 7 13
Asterisk (50)
    on left: 15 16, on right: 14 16 20 21 28 29
ParameterList (51)
    on left: 17, on right: 14
COMMA_ParameterDeclaration (52)
    on left: 18 19, on right: 17 19
ParameterDeclaration (53)
    on left: 20 21, on right: 17 19
Declaration (54)
    on left: 22, on right: 4 10
COMMA_Declarator (55)
    on left: 23 24, on right: 22 24
TypeSpec (56)
    on left: 25 26 27, on right: 7 13 20 21 22
Declarator (57)
    on left: 28 29, on right: 22 24
LSQSTATE (58)
    on left: 30, on right: 29
RSQSTATE (59)
    on left: 31, on right: 29
INTLITSTATE (60)
    on left: 32, on right: 29
Statement (61)
    on left: 33 34 35 36 37, on right: 12 37 38 39
StateIF (62)
    on left: 38 39, on right: 36
Expr0 (63)
    on left: 40 41, on right: 37
Expr (64)
    on left: 42 43 44 45 46, on right: 34 38 39 41 42
Empty (65)
    on left: 47, on right: 5 9 11 15 18 23 40


State 0

    0 $accept: . Start $end

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    Start                go to state 4
    FuncDefDecDec        go to state 5
    FunctionDefinition   go to state 6
    FunctionDeclaration  go to state 7
    Declaration          go to state 8
    TypeSpec             go to state 9


State 1

   25 TypeSpec: CHAR .

    $default  reduce using rule 25 (TypeSpec)


State 2

   26 TypeSpec: INT .

    $default  reduce using rule 26 (TypeSpec)


State 3

   27 TypeSpec: VOID .

    $default  reduce using rule 27 (TypeSpec)


State 4

    0 $accept: Start . $end

    $end  shift, and go to state 10


State 5

    1 Start: FuncDefDecDec . FuncDefDecDec1

    $default  reduce using rule 47 (Empty)

    FuncDefDecDec1  go to state 11
    Empty           go to state 12


State 6

    2 FuncDefDecDec: FunctionDefinition .

    $default  reduce using rule 2 (FuncDefDecDec)


State 7

    3 FuncDefDecDec: FunctionDeclaration .

    $default  reduce using rule 3 (FuncDefDecDec)


State 8

    4 FuncDefDecDec: Declaration .

    $default  reduce using rule 4 (FuncDefDecDec)


State 9

    7 FunctionDefinition: TypeSpec . FunctionDeclarator FunctionBody
   13 FunctionDeclaration: TypeSpec . FunctionDeclarator SEMI
   22 Declaration: TypeSpec . Declarator COMMA_Declarator SEMI

    $default  reduce using rule 47 (Empty)

    FunctionDeclarator  go to state 13
    Asterisk            go to state 14
    Declarator          go to state 15
    Empty               go to state 16


State 10

    0 $accept: Start $end .

    $default  accept


State 11

    1 Start: FuncDefDecDec FuncDefDecDec1 .
    6 FuncDefDecDec1: FuncDefDecDec1 . FuncDefDecDec

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    $default  reduce using rule 1 (Start)

    FuncDefDecDec        go to state 17
    FunctionDefinition   go to state 6
    FunctionDeclaration  go to state 7
    Declaration          go to state 8
    TypeSpec             go to state 9


State 12

    5 FuncDefDecDec1: Empty .

    $default  reduce using rule 5 (FuncDefDecDec1)


State 13

    7 FunctionDefinition: TypeSpec FunctionDeclarator . FunctionBody
   13 FunctionDeclaration: TypeSpec FunctionDeclarator . SEMI

    LBRACE  shift, and go to state 18
    SEMI    shift, and go to state 19

    FunctionBody  go to state 20


State 14

   14 FunctionDeclarator: Asterisk . ID LPAR ParameterList RPAR
   16 Asterisk: Asterisk . AST
   28 Declarator: Asterisk . ID
   29           | Asterisk . ID LSQSTATE INTLITSTATE RSQSTATE

    AST  shift, and go to state 21
    ID   shift, and go to state 22


State 15

   22 Declaration: TypeSpec Declarator . COMMA_Declarator SEMI

    $default  reduce using rule 47 (Empty)

    COMMA_Declarator  go to state 23
    Empty             go to state 24


State 16

   15 Asterisk: Empty .

    $default  reduce using rule 15 (Asterisk)


State 17

    6 FuncDefDecDec1: FuncDefDecDec1 FuncDefDecDec .

    $default  reduce using rule 6 (FuncDefDecDec1)


State 18

    8 FunctionBody: LBRACE . Declaration1 Statement1 RBRACE

    $default  reduce using rule 47 (Empty)

    Declaration1  go to state 25
    Empty         go to state 26


State 19

   13 FunctionDeclaration: TypeSpec FunctionDeclarator SEMI .

    $default  reduce using rule 13 (FunctionDeclaration)


State 20

    7 FunctionDefinition: TypeSpec FunctionDeclarator FunctionBody .

    $default  reduce using rule 7 (FunctionDefinition)


State 21

   16 Asterisk: Asterisk AST .

    $default  reduce using rule 16 (Asterisk)


State 22

   14 FunctionDeclarator: Asterisk ID . LPAR ParameterList RPAR
   28 Declarator: Asterisk ID .
   29           | Asterisk ID . LSQSTATE INTLITSTATE RSQSTATE

    LPAR  shift, and go to state 27
    LSQ   shift, and go to state 28

    $default  reduce using rule 28 (Declarator)

    LSQSTATE  go to state 29


State 23

   22 Declaration: TypeSpec Declarator COMMA_Declarator . SEMI
   24 COMMA_Declarator: COMMA_Declarator . COMMA Declarator

    COMMA  shift, and go to state 30
    SEMI   shift, and go to state 31


State 24

   23 COMMA_Declarator: Empty .

    $default  reduce using rule 23 (COMMA_Declarator)


State 25

    8 FunctionBody: LBRACE Declaration1 . Statement1 RBRACE
   10 Declaration1: Declaration1 . Declaration

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    $default  reduce using rule 47 (Empty)

    Statement1   go to state 32
    Declaration  go to state 33
    TypeSpec     go to state 34
    Empty        go to state 35


State 26

    9 Declaration1: Empty .

    $default  reduce using rule 9 (Declaration1)


State 27

   14 FunctionDeclarator: Asterisk ID LPAR . ParameterList RPAR

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    ParameterList         go to state 36
    ParameterDeclaration  go to state 37
    TypeSpec              go to state 38


State 28

   30 LSQSTATE: LSQ .

    $default  reduce using rule 30 (LSQSTATE)


State 29

   29 Declarator: Asterisk ID LSQSTATE . INTLITSTATE RSQSTATE

    INTLIT  shift, and go to state 39

    INTLITSTATE  go to state 40


State 30

   24 COMMA_Declarator: COMMA_Declarator COMMA . Declarator

    $default  reduce using rule 47 (Empty)

    Asterisk    go to state 41
    Declarator  go to state 42
    Empty       go to state 16


State 31

   22 Declaration: TypeSpec Declarator COMMA_Declarator SEMI .

    $default  reduce using rule 22 (Declaration)


State 32

    8 FunctionBody: LBRACE Declaration1 Statement1 . RBRACE
   12 Statement1: Statement1 . Statement

    FOR     shift, and go to state 43
    IF      shift, and go to state 44
    LBRACE  shift, and go to state 45
    LPAR    shift, and go to state 46
    RBRACE  shift, and go to state 47
    SEMI    shift, and go to state 48
    ID      shift, and go to state 49
    INTLIT  shift, and go to state 50
    STRLIT  shift, and go to state 51
    CHRLIT  shift, and go to state 52

    Statement  go to state 53
    StateIF    go to state 54
    Expr       go to state 55


State 33

   10 Declaration1: Declaration1 Declaration .

    $default  reduce using rule 10 (Declaration1)


State 34

   22 Declaration: TypeSpec . Declarator COMMA_Declarator SEMI

    $default  reduce using rule 47 (Empty)

    Asterisk    go to state 41
    Declarator  go to state 15
    Empty       go to state 16


State 35

   11 Statement1: Empty .

    $default  reduce using rule 11 (Statement1)


State 36

   14 FunctionDeclarator: Asterisk ID LPAR ParameterList . RPAR

    RPAR  shift, and go to state 56


State 37

   17 ParameterList: ParameterDeclaration . COMMA_ParameterDeclaration

    $default  reduce using rule 47 (Empty)

    COMMA_ParameterDeclaration  go to state 57
    Empty                       go to state 58


State 38

   20 ParameterDeclaration: TypeSpec . Asterisk
   21                     | TypeSpec . Asterisk ID

    $default  reduce using rule 47 (Empty)

    Asterisk  go to state 59
    Empty     go to state 16


State 39

   32 INTLITSTATE: INTLIT .

    $default  reduce using rule 32 (INTLITSTATE)


State 40

   29 Declarator: Asterisk ID LSQSTATE INTLITSTATE . RSQSTATE

    RSQ  shift, and go to state 60

    RSQSTATE  go to state 61


State 41

   16 Asterisk: Asterisk . AST
   28 Declarator: Asterisk . ID
   29           | Asterisk . ID LSQSTATE INTLITSTATE RSQSTATE

    AST  shift, and go to state 21
    ID   shift, and go to state 62


State 42

   24 COMMA_Declarator: COMMA_Declarator COMMA Declarator .

    $default  reduce using rule 24 (COMMA_Declarator)


State 43

   37 Statement: FOR . LPAR Expr0 SEMI Expr0 SEMI Expr0 RPAR Statement

    LPAR  shift, and go to state 63


State 44

   38 StateIF: IF . LPAR Expr RPAR Statement
   39        | IF . LPAR Expr RPAR Statement ELSE Statement

    LPAR  shift, and go to state 64


State 45

   35 Statement: LBRACE . Statement1 RBRACE

    $default  reduce using rule 47 (Empty)

    Statement1  go to state 65
    Empty       go to state 35


State 46

   42 Expr: LPAR . Expr RPAR

    LPAR    shift, and go to state 46
    ID      shift, and go to state 49
    INTLIT  shift, and go to state 50
    STRLIT  shift, and go to state 51
    CHRLIT  shift, and go to state 52

    Expr  go to state 66


State 47

    8 FunctionBody: LBRACE Declaration1 Statement1 RBRACE .

    $default  reduce using rule 8 (FunctionBody)


State 48

   33 Statement: SEMI .

    $default  reduce using rule 33 (Statement)


State 49

   43 Expr: ID .

    $default  reduce using rule 43 (Expr)


State 50

   44 Expr: INTLIT .

    $default  reduce using rule 44 (Expr)


State 51

   46 Expr: STRLIT .

    $default  reduce using rule 46 (Expr)


State 52

   45 Expr: CHRLIT .

    $default  reduce using rule 45 (Expr)


State 53

   12 Statement1: Statement1 Statement .

    $default  reduce using rule 12 (Statement1)


State 54

   36 Statement: StateIF .

    $default  reduce using rule 36 (Statement)


State 55

   34 Statement: Expr . SEMI

    SEMI  shift, and go to state 67


State 56

   14 FunctionDeclarator: Asterisk ID LPAR ParameterList RPAR .

    $default  reduce using rule 14 (FunctionDeclarator)


State 57

   17 ParameterList: ParameterDeclaration COMMA_ParameterDeclaration .
   19 COMMA_ParameterDeclaration: COMMA_ParameterDeclaration . COMMA ParameterDeclaration

    COMMA  shift, and go to state 68

    $default  reduce using rule 17 (ParameterList)


State 58

   18 COMMA_ParameterDeclaration: Empty .

    $default  reduce using rule 18 (COMMA_ParameterDeclaration)


State 59

   16 Asterisk: Asterisk . AST
   20 ParameterDeclaration: TypeSpec Asterisk .
   21                     | TypeSpec Asterisk . ID

    AST  shift, and go to state 21
    ID   shift, and go to state 69

    $default  reduce using rule 20 (ParameterDeclaration)


State 60

   31 RSQSTATE: RSQ .

    $default  reduce using rule 31 (RSQSTATE)


State 61

   29 Declarator: Asterisk ID LSQSTATE INTLITSTATE RSQSTATE .

    $default  reduce using rule 29 (Declarator)


State 62

   28 Declarator: Asterisk ID .
   29           | Asterisk ID . LSQSTATE INTLITSTATE RSQSTATE

    LSQ  shift, and go to state 28

    $default  reduce using rule 28 (Declarator)

    LSQSTATE  go to state 29


State 63

   37 Statement: FOR LPAR . Expr0 SEMI Expr0 SEMI Expr0 RPAR Statement

    LPAR    shift, and go to state 46
    ID      shift, and go to state 49
    INTLIT  shift, and go to state 50
    STRLIT  shift, and go to state 51
    CHRLIT  shift, and go to state 52

    $default  reduce using rule 47 (Empty)

    Expr0  go to state 70
    Expr   go to state 71
    Empty  go to state 72


State 64

   38 StateIF: IF LPAR . Expr RPAR Statement
   39        | IF LPAR . Expr RPAR Statement ELSE Statement

    LPAR    shift, and go to state 46
    ID      shift, and go to state 49
    INTLIT  shift, and go to state 50
    STRLIT  shift, and go to state 51
    CHRLIT  shift, and go to state 52

    Expr  go to state 73


State 65

   12 Statement1: Statement1 . Statement
   35 Statement: LBRACE Statement1 . RBRACE

    FOR     shift, and go to state 43
    IF      shift, and go to state 44
    LBRACE  shift, and go to state 45
    LPAR    shift, and go to state 46
    RBRACE  shift, and go to state 74
    SEMI    shift, and go to state 48
    ID      shift, and go to state 49
    INTLIT  shift, and go to state 50
    STRLIT  shift, and go to state 51
    CHRLIT  shift, and go to state 52

    Statement  go to state 53
    StateIF    go to state 54
    Expr       go to state 55


State 66

   42 Expr: LPAR Expr . RPAR

    RPAR  shift, and go to state 75


State 67

   34 Statement: Expr SEMI .

    $default  reduce using rule 34 (Statement)


State 68

   19 COMMA_ParameterDeclaration: COMMA_ParameterDeclaration COMMA . ParameterDeclaration

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    ParameterDeclaration  go to state 76
    TypeSpec              go to state 38


State 69

   21 ParameterDeclaration: TypeSpec Asterisk ID .

    $default  reduce using rule 21 (ParameterDeclaration)


State 70

   37 Statement: FOR LPAR Expr0 . SEMI Expr0 SEMI Expr0 RPAR Statement

    SEMI  shift, and go to state 77


State 71

   41 Expr0: Expr .

    $default  reduce using rule 41 (Expr0)


State 72

   40 Expr0: Empty .

    $default  reduce using rule 40 (Expr0)


State 73

   38 StateIF: IF LPAR Expr . RPAR Statement
   39        | IF LPAR Expr . RPAR Statement ELSE Statement

    RPAR  shift, and go to state 78


State 74

   35 Statement: LBRACE Statement1 RBRACE .

    $default  reduce using rule 35 (Statement)


State 75

   42 Expr: LPAR Expr RPAR .

    $default  reduce using rule 42 (Expr)


State 76

   19 COMMA_ParameterDeclaration: COMMA_ParameterDeclaration COMMA ParameterDeclaration .

    $default  reduce using rule 19 (COMMA_ParameterDeclaration)


State 77

   37 Statement: FOR LPAR Expr0 SEMI . Expr0 SEMI Expr0 RPAR Statement

    LPAR    shift, and go to state 46
    ID      shift, and go to state 49
    INTLIT  shift, and go to state 50
    STRLIT  shift, and go to state 51
    CHRLIT  shift, and go to state 52

    $default  reduce using rule 47 (Empty)

    Expr0  go to state 79
    Expr   go to state 71
    Empty  go to state 72


State 78

   38 StateIF: IF LPAR Expr RPAR . Statement
   39        | IF LPAR Expr RPAR . Statement ELSE Statement

    FOR     shift, and go to state 43
    IF      shift, and go to state 44
    LBRACE  shift, and go to state 45
    LPAR    shift, and go to state 46
    SEMI    shift, and go to state 48
    ID      shift, and go to state 49
    INTLIT  shift, and go to state 50
    STRLIT  shift, and go to state 51
    CHRLIT  shift, and go to state 52

    Statement  go to state 80
    StateIF    go to state 54
    Expr       go to state 55


State 79

   37 Statement: FOR LPAR Expr0 SEMI Expr0 . SEMI Expr0 RPAR Statement

    SEMI  shift, and go to state 81


State 80

   38 StateIF: IF LPAR Expr RPAR Statement .
   39        | IF LPAR Expr RPAR Statement . ELSE Statement

    ELSE  shift, and go to state 82

    $default  reduce using rule 38 (StateIF)


State 81

   37 Statement: FOR LPAR Expr0 SEMI Expr0 SEMI . Expr0 RPAR Statement

    LPAR    shift, and go to state 46
    ID      shift, and go to state 49
    INTLIT  shift, and go to state 50
    STRLIT  shift, and go to state 51
    CHRLIT  shift, and go to state 52

    $default  reduce using rule 47 (Empty)

    Expr0  go to state 83
    Expr   go to state 71
    Empty  go to state 72


State 82

   39 StateIF: IF LPAR Expr RPAR Statement ELSE . Statement

    FOR     shift, and go to state 43
    IF      shift, and go to state 44
    LBRACE  shift, and go to state 45
    LPAR    shift, and go to state 46
    SEMI    shift, and go to state 48
    ID      shift, and go to state 49
    INTLIT  shift, and go to state 50
    STRLIT  shift, and go to state 51
    CHRLIT  shift, and go to state 52

    Statement  go to state 84
    StateIF    go to state 54
    Expr       go to state 55


State 83

   37 Statement: FOR LPAR Expr0 SEMI Expr0 SEMI Expr0 . RPAR Statement

    RPAR  shift, and go to state 85


State 84

   39 StateIF: IF LPAR Expr RPAR Statement ELSE Statement .

    $default  reduce using rule 39 (StateIF)


State 85

   37 Statement: FOR LPAR Expr0 SEMI Expr0 SEMI Expr0 RPAR . Statement

    FOR     shift, and go to state 43
    IF      shift, and go to state 44
    LBRACE  shift, and go to state 45
    LPAR    shift, and go to state 46
    SEMI    shift, and go to state 48
    ID      shift, and go to state 49
    INTLIT  shift, and go to state 50
    STRLIT  shift, and go to state 51
    CHRLIT  shift, and go to state 52

    Statement  go to state 86
    StateIF    go to state 54
    Expr       go to state 55


State 86

   37 Statement: FOR LPAR Expr0 SEMI Expr0 SEMI Expr0 RPAR Statement .

    $default  reduce using rule 37 (Statement)
